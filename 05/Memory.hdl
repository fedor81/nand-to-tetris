// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Если address[14] = 0, мы адресуем память, иначе Screen или клавиатуру
    // Если не адресуем память и address[13] = 1, то адресуем клавиатуру
    // Если не адресуем память и address[13] = 0, то Screen 
    Not(in=address[14], out=toRam);
    And(a=address[13], b=address[14], out=toKeyboard);
    Not(in=address[13], out=notAddr13);
    And(a=address[14], b=notAddr13, out=toScreen);

    And(a=toRam, b=load, out=loadRam);
    And(a=toScreen, b=load, out=loadScreen);

    RAM16K(in=in, load=loadRam, address=address[0..13], out=outRam);
    Screen(in=in, load=loadScreen, address=address[0..12], out=outScreen);
    Keyboard(out=outKeyboard);

    // out = toKeyboard & outKeyboard | toScreen & outScreen | toRam & outRam
    Nand16(a[0]=toKeyboard, a[1]=toKeyboard, a[2]=toKeyboard, a[3]=toKeyboard, a[4]=toKeyboard,
        a[5]=toKeyboard, a[6]=toKeyboard, a[7]=toKeyboard, a[8]=toKeyboard, a[8]=toKeyboard,
        a[9]=toKeyboard, a[10]=toKeyboard, a[11]=toKeyboard, a[12]=toKeyboard, a[13]=toKeyboard,
        a[14]=toKeyboard, a[15]=toKeyboard, b=outKeyboard, out=toKeyNandOutKey);
    Nand16(a[0]=toScreen, a[1]=toScreen, a[2]=toScreen, a[3]=toScreen, a[4]=toScreen,
        a[5]=toScreen, a[6]=toScreen, a[7]=toScreen, a[8]=toScreen, a[8]=toScreen,
        a[9]=toScreen, a[10]=toScreen, a[11]=toScreen, a[12]=toScreen, a[13]=toScreen,
        a[14]=toScreen, a[15]=toScreen, b=outScreen, out=toScrNandOutScr);
    Nand16(a[0]=toRam, a[1]=toRam, a[2]=toRam, a[3]=toRam, a[4]=toRam,
        a[5]=toRam, a[6]=toRam, a[7]=toRam, a[8]=toRam, a[8]=toRam,
        a[9]=toRam, a[10]=toRam, a[11]=toRam, a[12]=toRam, a[13]=toRam,
        a[14]=toRam, a[15]=toRam, b=outRam, out=toRamNandOutRam);

    And16(a=toKeyNandOutKey, b=toScrNandOutScr, out=temp0);
    Nand16(a=temp0, b=toRamNandOutRam, out=out);
}