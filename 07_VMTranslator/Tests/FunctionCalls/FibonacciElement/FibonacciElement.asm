// initialization
@256
D=A
@0
M=D
@300
D=A
@1
M=D
@400
D=A
@2
M=D
@3000
D=A
@3
M=D
@3010
D=A
@4
M=D
// call Sys.init 0
@CALL_RET_0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
//     ARG = SP - 5 - argumentsCount
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@FUN_Sys.init
0;JMP
(CALL_RET_0)
//function Main.fibonacci 0
(FUN_Main.fibonacci)
//    init local segment
@SP
D=M
@LCL
M=D
D=0
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// // lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@LA_CMP_TRUE_0
D;JLT
@SP
A=M-1
M=0
@LA_CMP_END_1
0;JMP
(LA_CMP_TRUE_0)
@SP
A=M-1
M=-1
(LA_CMP_END_1)
//if-goto IF_TRUE
@SP
M=M-1
A=M
D=M
@IF_TRUE
D;JNE
//goto IF_FALSE
@IF_FALSE
0;JMP
(IF_TRUE)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@ARG
D=M
@oldArg
M=D
@SP
M=M-1
A=M
D=M
@retValue
M=D
@LCL
D=M
@SP
M=D
@SP
M=M-1
A=M
D=M
@THAT
M=D
@SP
M=M-1
A=M
D=M
@THIS
M=D
@SP
M=M-1
A=M
D=M
@ARG
M=D
@SP
M=M-1
A=M
D=M
@LCL
M=D
@SP
M=M-1
A=M
D=M
@retAddress
M=D
@oldArg
D=M+1
@SP
M=D
@retValue
D=M
@oldArg
A=M
M=D
@retAddress
A=M
0;JMP
(IF_FALSE)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// call Main.fibonacci 1
@CALL_RET_1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
//     ARG = SP - 5 - argumentsCount
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@FUN_Main.fibonacci
0;JMP
(CALL_RET_1)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
D=1
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// call Main.fibonacci 1
@CALL_RET_2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
//     ARG = SP - 5 - argumentsCount
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@FUN_Main.fibonacci
0;JMP
(CALL_RET_2)
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=D+M
//return
@ARG
D=M
@oldArg
M=D
@SP
M=M-1
A=M
D=M
@retValue
M=D
@LCL
D=M
@SP
M=D
@SP
M=M-1
A=M
D=M
@THAT
M=D
@SP
M=M-1
A=M
D=M
@THIS
M=D
@SP
M=M-1
A=M
D=M
@ARG
M=D
@SP
M=M-1
A=M
D=M
@LCL
M=D
@SP
M=M-1
A=M
D=M
@retAddress
M=D
@oldArg
D=M+1
@SP
M=D
@retValue
D=M
@oldArg
A=M
M=D
@retAddress
A=M
0;JMP
//function Sys.init 0
(FUN_Sys.init)
//    init local segment
@SP
D=M
@LCL
M=D
D=0
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
@CALL_RET_3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
//     ARG = SP - 5 - argumentsCount
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@FUN_Main.fibonacci
0;JMP
(CALL_RET_3)
(WHILE)
//goto WHILE
@WHILE
0;JMP
