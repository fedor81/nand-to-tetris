// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array powersTwo;

    /** Initializes the library. */
    function void init() {
        let powersTwo = Array.new(16);
        let powersTwo[0] = 1;
        let powersTwo[1] = 2;
        let powersTwo[2] = 4;
        let powersTwo[3] = 8;
        let powersTwo[4] = 16;
        let powersTwo[5] = 32;
        let powersTwo[6] = 64;
        let powersTwo[7] = 128;
        let powersTwo[8] = 256;
        let powersTwo[9] = 512;
        let powersTwo[10] = 1024;
        let powersTwo[11] = 2048;
        let powersTwo[12] = 4096;
        let powersTwo[13] = 8192;
        let powersTwo[14] = 16384;
        let powersTwo[15] = 16384 + 16384;
        return;
    }

    /** Возвращает соответствующий бит числа
     *  Номер бита не должен превышать 16
     */
    function boolean bit(int x, int bitNumber) {
        return ~(powersTwo[bitNumber] & x = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x = -32768) {
            return Sys.error(1);
        }

        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, counter;

        while (counter < 16) {
            if (Math.bit(y, counter)) {
                let sum = sum + x;
            }
            let x = x + x;
            let counter = counter + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int absX, absY;

        if (y = 0) {
            return Sys.error(2);
        }

        let absX = Math.abs(x);
        let absY = Math.abs(y);

        if (absY > absX) {
            return 0;
        }

        if ((x < 0) = (y < 0)) { 
            return Math._divide(absX, absY);
        } else {
            return -Math._divide(absX, absY);
        }
    }

    function int _divide(int x, int y) {
        var int q, qq;

        if (y < 16384) {
            let q = Math._divide(x, y + y);
        } else {
            let q = 0;
        }

        let qq = q + q;

        if ( (x - (qq * y)) < y ) {
            return qq;
        } else {
            return qq + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, temp;

        if (x < 0) {
            return Sys.error(3);
        }

        let j = 7;  // 16 / 2 - 1
        let y = 0;

        while( ~(j < 0) ) {
            let temp = (y + powersTwo[j]) * (y + powersTwo[j]);

            if( ~(temp > x) & (temp > 0) ){
                let y = y + powersTwo[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
