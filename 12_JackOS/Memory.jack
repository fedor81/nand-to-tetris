// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap, listEnd;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let listEnd = 0;
        let heap[0] = null;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int currBlock, prevBlock, blockSize, newBlock;
        let prevBlock = 0;
        let currBlock = 0;

        while (true) {
            let blockSize = heap[currBlock + 1];

            if (blockSize = size) {
                // Используем элемент листа полностью
                let heap[prevBlock] = heap[currBlock];
                let heap[currBlock] = null;
                return heap + currBlock + 2;
            }

            if (blockSize < size + 2) {
                // Переход к следущему блоку
                let prevBlock = currBlock;
                let currBlock = heap[currBlock];

                if (currBlock = null) {
                    do Sys.error(5);
                    return 0;
                }
            } else {
                // Создать новый блок
                let newBlock = currBlock + blockSize - size;
                let heap[newBlock] = null;
                let heap[newBlock + 1] = size;

                // Укоротить старый
                let heap[currBlock + 1] = blockSize - size - 2;
                return heap + newBlock + 2;  // Возвращаем абсолютный адрес
            }
        }
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array address) {
        var int currBlock;
        let address = address - heap - 2;
        let currBlock = 0;

        // Ищем последний блок
        while ( ~(heap[currBlock] = null) ) {
            let currBlock = heap[currBlock];
        }

        // Теперь это последний блок
        let heap[currBlock] = address;
        let heap[address] = null;
        return;
    }    
}
