// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int size) {
        if (size = 0) {
            let size = 1;
        }

        let length = 0;
        let maxLength = size;
        let str = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ( (j < 0) | ~(j < maxLength)) {
            return -1;
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ( (j < 0) | ~(j < maxLength)) {
            return;
        }

        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maxLength) {
            let str[length] = c;
            let length = length + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Проверка на отрицательность
        if (str[0] = 45) {
            return -_intValue(1);
        } else {
            return _intValue(0);
        }
    }

    method int _intValue(int index) {
        var int value, currChar;
        let value = 0;

        while (index < length) {
            let currChar = str[index];

            if ( (currChar < 48) | (currChar > 57) ) {
                return value;
            }

            let value = value * 10 + String._char2digit(currChar);
            let index = index + 1;
        }
        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;

        if (val < 0) {
            let val = -val;
            do appendChar(45);
        } 

        do _setInt(val);
        return;
    }

    method void _setInt(int n) {
        var int next;

        if (n < 10) {
            do appendChar(String._digit2char(n));
        } else {
            let next = n / 10;
            do _setInt(next);
            do appendChar(String._digit2char(n - (next * 10)));
        }

        return;
    }

    function char _digit2char(int d) {
        return d + 48;
    }

    function char _char2digit(char c) {
        return c - 48;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
